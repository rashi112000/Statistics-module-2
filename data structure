# install tidyverse
# 4 kinds of data: 
# 1. Logical (True or False, T/F)
# 2. Integers: Whole numbers- need to add L in the end 
# 3. Double/Numeric: All real numbers
# 4. Characters: letters, words, phrases- even numbers within double quotes is a character


# RELATIONAL OPERATORS 
# <, >, <=, >=, == (equal to, single "=" will not work), != (it means not equal to/ negation of equal to)
# DO NOT USE => or =< 
# "=" is equivalent to "<-" so it is assigning value


# LOGICAL OPERATORS
a <- 1
b <- 3
1. && (Intersection) (and)  => a < 3 && b < 4 => TRUE
2. || (Union) => a >3 || b < 4 => TRUE
3. ! (Negate) => !FALSE => True 
# (1 + 2) * 3 < a || b > 2**3 / 2 [9 < a || b > 4 ] => FALSE

# VECTORS
# :
# ":" column operator gives an integer
# ":" this is basically used to get a sequence 
1:10 - result: 1  2  3  4  5  6  7  8  9 10
10:1 - result 10  9  8  7  6  5  4  3  2  1
my_range <- 1:10
my_range = 1  2  3  4  5  6  7  8  9 10

# seq
1:10
seq(from = 1, to = 10)
seq(from = 1, to = 10, by =2)  # RESULT = 1 3 5 7 9 
seq(from = 1, to = 10, by = 2.2) # RESULT = 1.0 3.2 5.4 7.6 9.8
seq(from = 1, to = 10, length.out = 15) 
# RESULT = 1.000000  1.642857  2.285714  2.928571 3.571429  4.214286  4.857143  5.500000 6.142857  6.785714  7.428571  8.0714298.714286  9.357143 10.000000

#rep
rep(1, times = 5) # this repeat argument will repeat the input n number of times
rep(1:5, times =5)
rep(1:5, each = 5) # each argument helps to define how many times each element has to be repeated
rep(a, times = 3)

#c () concatonate/ combine 
c(TRUE, FALSE, TRUE) # first logical vector 
vec <- c(TRUE, FALSE, TRUE)
vec
c(1, 3.14, 10.54)
c("plant", "bird", "mammal")
is_native <- c(TRUE, FALSE, TRUE)
n_ind <- c(10L, 7L, 5L)
taxa_age <- c(2.11, 10.5, 68.9)
taxa <- c("plant", "bird", "mammal")

# measuring the vector by its length
length(taxa)
typeof(n_ind)
class(n_ind)
# typeof() and class() might give same results, might not => They are moslty synonyms
typeof(taxa_age) # => double
class(taxa_age) # => numeric

my_integer <- 6:10
# instead of having all elemets, we just want to extract element 2/ specific elements from this sequence
my_integer[2] # result: 7
my_integer[2:4] # result: 7 8 9
my_integer[c(1,2,4)] # result: 6 7 9 

# extracting elements suing True and  False
rep( 1:5, 10)
my_integer 
my_logical <- c(TRUE, FALSE, TRUE, FALSE, TRUE)
my_integer[my_logical]

my_logical <- c(FALSE, TRUE)
my_integer[my_logical]

# ":" used to write sequence , 1:3 = 1 2 3 
# seq() : is used to write a sequence of numbers but with a step value 
# eg: seq(from= 2 , to= 6, by= 2 ), result: 2 4 6 
# rep(): is used to repeat a seq or number any number of times 
# eg: rep(1:2, times=3) result: 1 2 1 2 1 2

to extarct values frpm a vector, we use []
eg: exam_grades <- c(92, 90, 84, 95, 77, 92, 85)
exam_grades[3], result: 84, exam_grades[1:4], result: 92 90 84 95

if you want to remove a particular element, exam_grade[-1]
if you want to remove a series of elements exam_grades[c(-1, -2, -3)]
